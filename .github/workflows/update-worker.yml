name: Auto Update WorkerX

on: 
  push: 
    branches: 
      - main 
  schedule: 
    - cron: "0 1 * * *" # Automatically run at 1 a.m. every day 
  workflow_dispatch: # Supports manual running

permissions: 
  contents: write

jobs: 
  update: 
    runs-on: ubuntu-latest 
    steps: 
      - name: Initialize repository 
        uses: actions/checkout@v4

      - name: Get the current local version 
        id: get_local_version 
        run: | 
          echo -e "\033[34m[Get local version]\033[0m" 
          if [ -f version.txt ]; then 
            LOCAL_VERSION=$(cat version.txt) 
            echo "Current local version: $LOCAL_VERSION" 
          else 
            echo "First synchronization, no local version." 
            LOCAL_VERSION="" 
          fi 
          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV

      - name: Get the latest Release information 
        id: get_release 
        run: | 
          echo -e "\033[34m[Get the latest Release]\033[0m" 
          API_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases" 
          RESPONSE=$(curl -s "$API_URL") 
          LATEST_RELEASE=$(echo "$RESPONSE" | jq -r '.[0]') 
          TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name') 
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name == "worker.zip") | .browser_download_url')

          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then 
            echo -e "\033[31mworker.zip not found, exit!\033[0m" 
            exit 1 
          fi

          echo "Latest version number: $TAG_NAME" 
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV 
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Determine whether an update is neededid 
        : check_update 
        run: | 
          echo -e "\033[34m[Determine whether an update is needed]\033[0m" 
          if [ "$LOCAL_VERSION" = "$TAG_NAME" ]; then 
            echo -e "\033[32mAlready the latest version, no need to update.\033[0m" 
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV 
          else 
            echo -e "\033[33mA new version has been found, which requires updating!\033[0m" 
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV 
          fi

      - name: If necessary, clean up old files and download the new versionif 
        : env.UPDATE_NEEDED == 'true' 
        run: | 
          echo -e "\033[34m[Clean up old files]\033[0m" 
          rm -rf ./* 
          echo -e "\033[34m[Download the latest worker.zip]\033[0m" 
          wget -O worker.zip "$DOWNLOAD_URL" 
          echo -e "\033[34m[Unzip worker.zip]\033[0m" 
          unzip worker.zip 
          echo -e "\033[34m[Delete worker.zip]\033[0m" 
          rm worker.zip 
          echo -e "\033[34m[Record the new version number]\033[0m" 
          echo "$TAG_NAME" > version.txt

      - name: Commit changes 
        if: env.UPDATE_NEEDED == 'true' 
        uses: stefanzweifel/git-auto-commit-action@v5 
        with: 
          commit_message: "ðŸ”„ Automatically synchronize the latest Worker version: ${{ env.TAG_NAME }}" 
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>" 
          push_options: --force
